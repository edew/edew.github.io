{"componentChunkName":"component---src-templates-blog-post-js","path":"/reverse-a-linked-list/","result":{"data":{"site":{"siteMetadata":{"title":"dewhurst.io"}},"markdownRemark":{"id":"176bd01c-6383-59c6-9998-c919376e16bd","excerpt":"Suppose we have a linked list where each node is a Node: How would we write a function to reverse such a list? Iterative Intuitively we want to “walk” through…","html":"<p>Suppose we have a linked list where each node is a Node:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How would we write a function to reverse such a list?</p>\n<h2>Iterative</h2>\n<p>Intuitively we want to “walk” through the list and change each node to point to the previous, stopping when we get to the end.</p>\n<p>The iterative reverse function takes the head node of the list as the only parameter and return the new head node once reversed.</p>\n<p>Within the function we’re going to use three variables to keep track of the previous, current, and next nodes that we want to process. Initially we assign current to be the head node provided as a parameter, and assign previous to be null.</p>\n<p>Then while the <code class=\"language-text\">current</code> node is not null we:</p>\n<ul>\n<li>assign <code class=\"language-text\">next</code> to the value of the <code class=\"language-text\">current</code> node’s next property</li>\n<li>assign the <code class=\"language-text\">current</code> node’s next property to the value of <code class=\"language-text\">previous</code></li>\n<li>assign <code class=\"language-text\">current</code> to the value of <code class=\"language-text\">next</code></li>\n</ul>\n<p>Finally, once the value of current is null, we return the value of previous.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">head</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> head\n  <span class=\"token keyword\">let</span> previous <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">let</span> next\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next\n    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> previous\n    previous <span class=\"token operator\">=</span> current\n    current <span class=\"token operator\">=</span> next\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> previous\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Recursive</h2>\n<p>Again, intuitively we want to “walk” through the list and change each node to point to the previous, stopping when we get to the end.</p>\n<p>This time instead of using a loop we’ll use recursion.</p>\n<p>The recursive reverse function takes the current and previous nodes as parameters and return the new head node once reversed.</p>\n<p>Let’s start with our base case; when <code class=\"language-text\">current</code> is null we want to return the value of <code class=\"language-text\">previous</code>.</p>\n<p>If current isn’t null then we:</p>\n<ul>\n<li>assign <code class=\"language-text\">next</code> to the value of the <code class=\"language-text\">current</code> node’s next property</li>\n<li>assign the <code class=\"language-text\">current</code> node’s next property to the value of <code class=\"language-text\">previous</code></li>\n<li>return the value of recursively calling reverse with <code class=\"language-text\">next</code> as the current parameter, and <code class=\"language-text\">current</code> as the previous parameter</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> previous</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> previous\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next\n  current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> previous\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Example</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"]->\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">iterative</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">head</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> head\n  <span class=\"token keyword\">let</span> previous <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">let</span> next\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next\n    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> previous\n    previous <span class=\"token operator\">=</span> current\n    current <span class=\"token operator\">=</span> next\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> previous\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recursive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> previous</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> previous\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next\n  current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> previous\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nhead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1]->[2]->[3]->[4]->[5]->null</span>\n\nhead <span class=\"token operator\">=</span> <span class=\"token function\">iterative</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [5]->[4]->[3]->[2]->[1]->null</span>\n\nhead <span class=\"token operator\">=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1]->[2]->[3]->[4]->[5]->null</span></code></pre></div>","frontmatter":{"title":"Reverse a linked list","date":"February 04, 2020","description":"How would we write a function to reverse a linked list?"}}},"pageContext":{"slug":"/reverse-a-linked-list/","previous":null,"next":null}}}