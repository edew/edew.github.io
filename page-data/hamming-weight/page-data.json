{"componentChunkName":"component---src-templates-blog-post-js","path":"/hamming-weight/","result":{"data":{"site":{"siteMetadata":{"title":"For me"}},"markdownRemark":{"id":"0b022d16-b478-5a7c-a208-25573e772121","excerpt":"Suppose we have the number 4510, or 001011012. How can we calculate the number of 1 bits in the binary representation of the number? The algorithm Luckily this…","html":"<p>Suppose we have the number 45<sub>10</sub>, or 00101101<sub>2</sub>.</p>\n<p>How can we calculate the number of 1 bits in the binary representation of the number?</p>\n<h2>The algorithm</h2>\n<p>Luckily this is a well defined problem, in fact Peter Wegner described an algorithm for doing just this sixty years ago!</p>\n<p>The function takes a <code class=\"language-text\">number</code> as its argument and returns the count of 1 bits in that number.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">weight</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">&amp;=</span> number <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> count\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While the <code class=\"language-text\">number</code> is greater than zero we reassign its value to be the bitwise and of <code class=\"language-text\">number</code> and <code class=\"language-text\">number - 1</code> and increment <code class=\"language-text\">count</code> by one. Finally once the number is zero we return the count. This algorithm works by changing the rightmost 1 bit to 0 in each iteration, continuing until all the bits have been set to 0 (i.e. <code class=\"language-text\">number</code> is zero).</p>\n<p>Let’s walk through the algorithm for the number 9<sub>10</sub>, or 00001001<sub>2</sub>. First we initialise <code class=\"language-text\">number</code> to <code class=\"language-text\">9</code>, <code class=\"language-text\">count</code> to <code class=\"language-text\">0</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>Now we begin. <code class=\"language-text\">number</code> is greater than zero, so we reassign it to <code class=\"language-text\">9 &amp; 8</code> (<code class=\"language-text\">00001001 &amp; 00001000</code>) and increase <code class=\"language-text\">count</code> by one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">number <span class=\"token operator\">=</span> number <span class=\"token operator\">&amp;=</span> number <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\ncount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Is <code class=\"language-text\">number</code> still greater than zero? Yes. So we reassign it to <code class=\"language-text\">8 &amp; 7</code> (<code class=\"language-text\">00001000 &amp; 00000111</code>) and increase <code class=\"language-text\">count</code> by one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">number <span class=\"token operator\">=</span> number <span class=\"token operator\">&amp;=</span> number <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\ncount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Is <code class=\"language-text\">number</code> still greater than zero? No, so we’re done! The number of 1 bits in the original value of <code class=\"language-text\">number</code> is given by the value of <code class=\"language-text\">count</code>, which is <code class=\"language-text\">2</code> in this case.</p>\n<h2>Further examples</h2>\n<h3>Example 1</h3>\n<p>How many 1 bits are in the binary representation of 1<sub>10</sub>, or 00000001<sub>2</sub>?</p>\n<table>\n<thead>\n<tr>\n<th>iteration</th>\n<th>number</th>\n<th>number - 1</th>\n<th>number &#x26; (number - 1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>00000111</td>\n<td>00000110</td>\n<td>00000110</td>\n</tr>\n<tr>\n<td>2</td>\n<td>00000110</td>\n<td>00000101</td>\n<td>00000100</td>\n</tr>\n<tr>\n<td>3</td>\n<td>00000100</td>\n<td>00000011</td>\n<td>00000000</td>\n</tr>\n</tbody>\n</table>\n<p>After 3 iterations <code class=\"language-text\">number</code> has been reduced to zero, so the count is three.</p>\n<h3>Example 2</h3>\n<p>How many 1 bits are in the binary representation of 7<sub>10</sub>, or 00000111<sub>2</sub>?</p>\n<table>\n<thead>\n<tr>\n<th>iteration</th>\n<th>number</th>\n<th>number - 1</th>\n<th>number &#x26; (number - 1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>00010000</td>\n<td>00001111</td>\n<td>00000000</td>\n</tr>\n</tbody>\n</table>\n<p>After 1 iteration <code class=\"language-text\">number</code> has been reduced to zero, so the count is one.</p>\n<h3>Example 3</h3>\n<p>How many 1 bits are in the binary representation of 31<sub>10</sub>, or 00011111<sub>2</sub>?</p>\n<table>\n<thead>\n<tr>\n<th>iteration</th>\n<th>number</th>\n<th>number - 1</th>\n<th>number &#x26; (number - 1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>00011111</td>\n<td>00011110</td>\n<td>00011110</td>\n</tr>\n<tr>\n<td>2</td>\n<td>00011110</td>\n<td>00011101</td>\n<td>00011100</td>\n</tr>\n<tr>\n<td>3</td>\n<td>00011100</td>\n<td>00011011</td>\n<td>00011000</td>\n</tr>\n<tr>\n<td>4</td>\n<td>00011000</td>\n<td>00010111</td>\n<td>00010000</td>\n</tr>\n<tr>\n<td>5</td>\n<td>00010000</td>\n<td>00001111</td>\n<td>00000000</td>\n</tr>\n</tbody>\n</table>\n<p>After 5 iterations <code class=\"language-text\">number</code> has been reduced to zero, so the count is five.</p>","frontmatter":{"title":"Hamming weight","date":"March 15, 2020","description":"How can we calculate the number of 1 bits in a number?"}}},"pageContext":{"slug":"/hamming-weight/","previous":{"fields":{"slug":"/reverse-a-linked-list/"},"frontmatter":{"title":"Reverse a linked list"}},"next":null}}}